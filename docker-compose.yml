version: '3.8'

services:
  # PostgreSQL Database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg15
    container_name: opendiscourse-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-opendiscourse}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/initdb.d:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - opendiscourse

  # ClickHouse for analytics
  clickhouse:
    image: clickhouse/clickhouse-server:23.3
    container_name: opendiscourse-clickhouse
    environment:
      CLICKHOUSE_DB: ${CLICKHOUSE_DB:-opendiscourse}
      CLICKHOUSE_USER: ${CLICKHOUSE_USER:-default}
      CLICKHOUSE_PASSWORD: ${CLICKHOUSE_PASSWORD:-password}
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
      - ./infrastructure/clickhouse:/etc/clickhouse-server
    networks:
      - opendiscourse

  # Neo4j Graph Database
  neo4j:
    image: neo4j:5.15
    container_name: opendiscourse-neo4j
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-password}
      NEO4J_PLUGINS: '["apoc", "graph-data-science"]'
      NEO4J_apoc_export_file_enabled: true
      NEO4J_apoc_import_file_enabled: true
      NEO4J_apoc_import_file_use__neo4j__config: true
      NEO4J_dbms_security_procedures_unrestricted: "gds.*,apoc.*"
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./docker/neo4j/neo4j.conf:/var/lib/neo4j/conf/neo4j.conf
    networks:
      - opendiscourse

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.23.1
    container_name: opendiscourse-weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'backup-filesystem,text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    ports:
      - "8080:8080"
    volumes:
      - weaviate_data:/var/lib/weaviate
    networks:
      - opendiscourse

  # Qdrant Vector Database (alternative)
  qdrant:
    image: qdrant/qdrant:v1.7.3
    container_name: opendiscourse-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - opendiscourse

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: opendiscourse-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - opendiscourse

  # Supabase (Local Development Stack)
  supabase-db:
    image: supabase/postgres:15.1.0.117
    container_name: opendiscourse-supabase-db
    environment:
      POSTGRES_HOST: /var/run/postgresql
      PGPORT: 5432
      POSTGRES_PORT: 5432
      PGDATABASE: postgres
      POSTGRES_DB: postgres
      PGUSER: supabase_admin
      POSTGRES_USER: supabase_admin
      PGPASSWORD: ${SUPABASE_DB_PASSWORD:-supabase}
      POSTGRES_PASSWORD: ${SUPABASE_DB_PASSWORD:-supabase}
      JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      JWT_EXP: ${JWT_EXPIRY:-3600}
    ports:
      - "5433:5432"
    volumes:
      - supabase_db_data:/var/lib/postgresql/data
    networks:
      - opendiscourse

  supabase-auth:
    image: supabase/gotrue:v2.99.0
    container_name: opendiscourse-supabase-auth
    depends_on:
      - supabase-db
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999
      API_EXTERNAL_URL: ${API_EXTERNAL_URL:-http://localhost:8000}
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${SUPABASE_DB_PASSWORD:-supabase}@supabase-db:5432/postgres
      GOTRUE_SITE_URL: ${SITE_URL:-http://localhost:3000}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS:-}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP:-false}
      GOTRUE_JWT_SECRET: ${JWT_SECRET:-super-secret-jwt-token-with-at-least-32-characters-long}
      GOTRUE_JWT_EXP: ${JWT_EXPIRY:-3600}
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP:-true}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM:-true}
    ports:
      - "9999:9999"
    networks:
      - opendiscourse

  # Kong API Gateway
  kong:
    image: kong:3.4
    container_name: opendiscourse-kong
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
      - "8443:8443"
    volumes:
      - ./infrastructure/kong:/kong/declarative
    networks:
      - opendiscourse

  # OpenWebUI for AI Chat Interface
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: opendiscourse-openwebui
    environment:
      OPENAI_API_BASE_URL: ${OPENAI_API_BASE_URL:-}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      WEBUI_SECRET_KEY: ${WEBUI_SECRET_KEY:-secret-key}
    ports:
      - "3000:8080"
    volumes:
      - openwebui_data:/app/backend/data
    networks:
      - opendiscourse

  # LocalAI for local LLM inference
  localai:
    image: localai/localai:latest-aio-cpu
    container_name: opendiscourse-localai
    environment:
      MODELS_PATH: /models
      DEBUG: ${DEBUG:-false}
    ports:
      - "8081:8080"
    volumes:
      - localai_models:/models
    networks:
      - opendiscourse

  # Flowise for Low-code AI workflows
  flowise:
    image: flowiseai/flowise:latest
    container_name: opendiscourse-flowise
    environment:
      DATABASE_PATH: /root/.flowise
      APIKEY_PATH: /root/.flowise
      SECRETKEY_PATH: /root/.flowise
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "3001:3000"
    volumes:
      - flowise_data:/root/.flowise
    networks:
      - opendiscourse

  # n8n for workflow automation
  n8n:
    image: n8nio/n8n:latest
    container_name: opendiscourse-n8n
    environment:
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD:-password}
      N8N_HOST: ${SUBDOMAIN:-n8n}.${DOMAIN_NAME:-localhost}
      N8N_PROTOCOL: ${PROTOCOL:-http}
      NODE_ENV: production
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost:5678}
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE:-America/New_York}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - opendiscourse

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: opendiscourse-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - opendiscourse

  grafana:
    image: grafana/grafana:10.1.0
    container_name: opendiscourse-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3002:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - opendiscourse

  loki:
    image: grafana/loki:2.9.0
    container_name: opendiscourse-loki
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - opendiscourse

  # Application Services
  opendiscourse-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: opendiscourse-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-opendiscourse}
      SUPABASE_URL: http://kong:8000
      SUPABASE_ANON_KEY: ${SUPABASE_ANON_KEY:-}
      SUPABASE_SERVICE_ROLE_KEY: ${SUPABASE_SERVICE_ROLE_KEY:-}
      CLICKHOUSE_URL: http://clickhouse:8123
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      WEAVIATE_URL: http://weaviate:8080
      QDRANT_URL: http://qdrant:6333
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOVINFO_API_KEY: ${GOVINFO_API_KEY:-}
    ports:
      - "3333:3000"
    depends_on:
      - postgres
      - clickhouse
      - neo4j
      - weaviate
      - rabbitmq
      - supabase-db
      - supabase-auth
    volumes:
      - ./src:/app/src
      - ./services:/app/services
    networks:
      - opendiscourse

  # Worker service for background processing
  opendiscourse-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: opendiscourse-worker
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-opendiscourse}
      CLICKHOUSE_URL: http://clickhouse:8123
      NEO4J_URI: bolt://neo4j:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-password}
      WEAVIATE_URL: http://weaviate:8080
      QDRANT_URL: http://qdrant:6333
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-guest}:${RABBITMQ_DEFAULT_PASS:-guest}@rabbitmq:5672
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      GOVINFO_API_KEY: ${GOVINFO_API_KEY:-}
    depends_on:
      - postgres
      - clickhouse
      - neo4j
      - weaviate
      - rabbitmq
    networks:
      - opendiscourse

volumes:
  postgres_data:
  clickhouse_data:
  neo4j_data:
  neo4j_logs:
  weaviate_data:
  qdrant_data:
  rabbitmq_data:
  supabase_db_data:
  openwebui_data:
  localai_models:
  flowise_data:
  n8n_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  opendiscourse:
    driver: bridge