name: Enforce Branch Protection

on:
  push:
    branches: [ main, develop ]
  pull_request_target:
    types: [opened, synchronize, reopened]
  repository_dispatch:
    types: [branch_protection_updated]
  workflow_dispatch:

jobs:
  enforce-branch-protection:
    name: Enforce Branch Protection Rules
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install PyGithub
        
    - name: Enforce branch protection
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        import os
        from github import Github
        import yaml
        
        # Load branch protection rules
        with open('.github/branch-protection.yml', 'r') as f:
            protection_rules = yaml.safe_load(f)
        
        # Initialize GitHub client
        g = Github(os.environ['GITHUB_TOKEN'])
        repo = g.get_repo(os.environ['GITHUB_REPOSITORY'])
        
        # Apply protection to main and develop branches
        for branch_name in ['main', 'develop']:
            try:
                branch = repo.get_branch(branch_name)
                branch.edit_protection(
                    enforce_admins=protection_rules.get('enforce_admins', False),
                    required_approving_review_count=protection_rules.get('required_pull_request_reviews', {}).get('required_approving_review_count', 1),
                    require_code_owner_reviews=protection_rules.get('required_pull_request_reviews', {}).get('require_code_owner_reviews', True),
                    dismiss_stale_reviews=protection_rules.get('required_pull_request_reviews', {}).get('dismiss_stale_reviews', True),
                    required_status_checks={
                        'strict': protection_rules.get('required_status_checks', {}).get('strict', True),
                        'contexts': protection_rules.get('required_status_checks', {}).get('contexts', [])
                    },
                    restrictions=protection_rules.get('restrictions', None),
                    user_push_restrictions=protection_rules.get('restrictions', {}).get('users', []),
                    team_push_restrictions=protection_rules.get('restrictions', {}).get('teams', []),
                    enforce_linear_history=protection_rules.get('required_linear_history', True),
                    allow_force_pushes=protection_rules.get('allow_force_pushes', False),
                    allow_deletions=protection_rules.get('allow_deletions', False),
                    required_conversation_resolution=protection_rules.get('required_conversation_resolution', True)
                )
                print(f"✅ Protected branch: {branch_name}")
            except Exception as e:
                print(f"❌ Error protecting {branch_name}: {str(e)}")
      
    - name: Verify branch protection
      run: |
        echo "Verifying branch protection rules..."
        # Add verification steps here
        
    - name: Notify on failure
      if: failure()
      uses: rtCamp/action-slack-notify@v2.2.0
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: "Branch Protection Update Failed"
        SLACK_MESSAGE: "Failed to update branch protection rules. Check the workflow run for details."
        SLACK_COLOR: "danger"
